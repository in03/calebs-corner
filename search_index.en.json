[{"url":"https://calebtrevatt.com/","title":"Caleb's Corner","description":null,"body":"\n👋 Hi, I’m Caleb.\n\nCreative Investigator ✨ | Tech Tinkerer 🛠️ | Thing Thinkerer 💡\n\n\nWelcome to my little corner of the internet.\nI’m a busy dad, husband, and IT enthusiast.\nI write code, deploy software and read bedtime stories.\n\n\nWhat is this place?\nThis is a place where I write about things I’m learning, building, and thinking about.\nI try to keep it light and fun, and I hope you find it useful.\nFeel free to poke around 👉\n\nPosts - Long-form thoughts and ideas.\nSnippets - Quick tips and tricks.\n\n\nWanna Connect?\n\nGithub: @in03\nDiscord: @in03\nTwitter: @caleb_trevatt\nInstagram: @caleb_trevatt\n\n","path":null},{"url":"https://calebtrevatt.com/snippets/","title":"Snippets.","description":null,"body":"Not-quite-posts. Glorified bookmarks. Quick thoughts and findings. Probs a bit codey.\n","path":null},{"url":"https://calebtrevatt.com/snippets/calculate-aspect-ratio/","title":"Aspect Ratio Calculator","description":null,"body":"Why?\nI threw this together for two reasons:\n\nAspect ratio is tedious to calculate by hand.\nI wanted to try using CodePen.\n\nTedium\nTo calculate aspect ratio, you need the Greatest Common Divisor (GCD). You can get this with the Euclidean algorithm, but doing this by hand or in a phone calculator is still slow and manual.\nYou can side-step GCD by using N:1 aspect ratio instead, e.g. “1.85:1”\nJust divide. 1920/1080 == 1.85\nBut unless you’re a cinephile, that’s not as common and probably not what you’re looking for.\nCodePen\nAnyway. Code to the rescue!\n\n  See the Pen \n  Aspect Ratio Calculator by Caleb Trevatt (@in03)\n  on CodePen.\n\n\nHow?\nCheck out the source code.\nI initially did this in Python which was very easy with the function built into the standard library:\n\nThen I wanted to publish it to my site, so I moved it to Javascript. Unfortunately JS doesn’t have a GCD function built in…\n\nThis is a recursive function implementing the Euclidean algorithm to find the greatest common divisor of two numbers.\n\n\t\n\t\tNote\n\tIf you’re unfamiliar with that questionmark / colon syntax, that’s a ternary operator.\nIt’s essentially a one liner if/else statement.\n\n\n\nIf b is 0, it returns a (base case).\nOtherwise, it calls itself recursively with b and a % b until bbecomes 0, at which point a is theGCD.\n\n\nThis finds the largest number that evenly divides both width and height.\nNotes on CodePen\nI heard an episode of the Changelog recently interviewing Chris Coyier and Dave Rupert.\nChris Coyier is the founder of Codepen and talked a little bit about it. Some of the features sounded really interesting.\nI threw together this junky calculator and wondered briefly about embedding it straight into my site, but I thought I’d take the opportunity to give CodePen a whirl.\nI’d never actually written of my own in CodePen before, but I’ve messed around with it online when I’ve stumbled into the world of frontend demos and visual javascript experiments.\nSome Key Points No One Asked For\n\n\nLayout: Not a fan of the default view. I like the results on the right and the HTML, CSS, JS stacked on the left.\n\n\nDucks in a row: Indentation seems quirky. Alignment always seems to overshoot on the first tab.\n\n\nBrainrot: I was hankering for my IDE and AI code completion… Maybe more of a comment on me than CodePen.\n\n\nActivation Energy: I wouldn’t have bothered with this if I had to start a git repo, create a project, spin up a web server, etc.\nHow much learning have I missed because I haven’t throw together junky tools with rapid prototyping?\n\n\n","path":null},{"url":"https://calebtrevatt.com/snippets/dock-adjustments/","title":"Dock Tweaks","description":null,"body":"Disable Dock Autohide Animation\nThis tweak wins you back some screen real-estate and makes the dock feel snappier. Following the below makes the dock hidden by default even with non-fullscreened windows. On mouseover, the dock will unhide itself instantly with no animation.\n\n\n\t\n\t\tTip\n\tThese are my personal preferences.\nI spent a little time digging to get these settings, wrote this post and then found this immensely useful website macOS-defaults.com. Definitely go there for more info on defaults!\n\n\nPress ⌘ + ⌥ + D to enable autohide.\n\nYou can set those -float values as desired. 0 is instant.\n\n\t\n\t\tNote\n\tThe dock will still have an activation “pressure” behaviour in fullscreen apps which can’t be configured.\nWorkaround is to fit the window with double click instead of fullscreening.\n\n\nTo revert, reset those adjustments with delete.\n\n","path":null},{"url":"https://calebtrevatt.com/snippets/zola/","title":"Deploying Zola to GitHub Pages","description":null,"body":"Context\nIn case you weren’t aware, this whole site is built with Zola.\nIt’s a fast, static site generator written in Rust. I left Hugo for it 💔\nAlso, shoutout to the theme creator, Daudix for making this theme.\nHe doesn’t seem like a GitHub fan, so I didn’t find much on deploying to Pages in his otherwise very comprehensive docs.\nPrerequisites\nYou should be able to find plenty of up-to-date resources for setting up GitHub pages and GitHub actions elsewhere.\nI won’t create any unnecessary surface area for breaking changes. I’ll leave you to find those.\n\nDeployment\nIn a nutshell, you can either:\n\nPush the workflow from the repo\nAdd it directly to the repo from GitHub Actions.\n\n\n\t\n\t\tCaution\n\tMake sure you update the Zola URL and version as needed, and keep an eye out for deprecation warnings. Most of this should be pretty easy to debug from the GitHub Actions UI.\n\n\n\n\n\t\n\n\n","path":null},{"url":"https://calebtrevatt.com/about/","title":"About Me.","description":null,"body":"Not sure what we’re doing with this. About page? Or just landing page?\n\nCreative Investigator ✨ | Tech Tinkerer 🛠️ | Thing Thinkerer 💡\n\n👋 Hi, I’m Caleb.\n\nI’m a busy dad, husband, and IT enthusiast.\nI write code, deploy software and read bedtime stories.\n","path":null},{"url":"https://calebtrevatt.com/blog/","title":"Stuff I wrote.","description":null,"body":"Here you’ll find some stuff I wrote.\n","path":null},{"url":"https://calebtrevatt.com/blog/hyperot-and-the-future-of-web/","title":"Hyperot and the Future of the Web","description":null,"body":"The Hype 🙌\nThe tech world has become a carnival of invented problems—hypercapitalist distractions dressed up as innovation. Shallow issues birth shallow solutions, and the cycle spins on. Go on, pick your favourite corner of the tech sphere:\n\n\nConcerns over AGI ethics? Boomer fearmongering hot air 💨 Philosophers have argued artificial intelligence morals since ancient times 🗿 Pro or no, the industry forges ahead. Further discussion is to join a legacy of trivial debate and wasted time.\n\n\nDiscussions of LLM sentience? Pre-emptive corporate virtue signaling 🫸Get in early! Become an advocate for the language model rights of tomorrow while you leverage the sleepless efficiency of GPU farms today ⚡\n\n\nBreaking news on new major data breaches? Slow news day. “Multi-billion dollar company receives a chippy slap for data mishandling because the world is watching.” 📻 Governments floods the job market with tax-payer funded script kiddies to defend the digital frontier 🙅\n\n\nCrowdstrike’s bad patches causing global kernel panics? Overhyped sensationalist clickbait to fuel tensions in our pre-apocalyptic zeitgeist 🤪💥\n\n\nThe Rot 💔\n\n“The web neglected—\nforgotten roots, tangled code,\ngazes shift, links lost.” – Matsuo Basho\n\nCarrier-grade NAT (CGNAT) is a band-aid over a bullet hole. Dual-stack networks (IPv4 and IPv6) are holding us in a van Damme-style split that’s bound to tear. Our collective attention is already fractured—and “AI sloppification” isn’t making us any smarter.\nIf we don’t migrate home networks to IPv6 by 2028, we’re not just dealing with tech debt. We’re defaulting on the future.\nThese are the tabloid side-quests of modern computing. They vie for our limited attention whilst their subjects offer little real world transformation. They’re flashy, tweetable, and utterly meaningless. And while sink blissfully into our tech-debt jacuzzi, the real bugs slowly and silently undermine the foundations of our infrastructure like digital termites.\nLet’s talk about IPv6 ✨\nAdoption outside major telcos sits at an embarrassing 13%. Meanwhile, Web3 evangelists are heralding a decentralized future, Dapps are poised to dethrone centralised platforms, and hyperscaler hell is calling for the downfall of Silicon Valley’s pale Princes.\nBut this communal computing wonderland is a feeble fantasy without universal IPv6 adoption. We’d be stacking our decentralised dreams in the rubble with the wormtongued con-men and conjurers, prospecting their new capitalist cults.\nWe must amass the following now.\nThat’s right… Us.\nYou.\n\nThe Homeless Homelabbers.\nThe Bare-Metal Boffins.\nThe Docker Dreamers and Kubernetes kids.\nThe rebels punching unsanctioned holes into the walls of their rentals to run fibre channel for their solo SAN.\n\nYou’re it.\nYou are the last vestige of hope, and to you I charge this mission:\nConvert the masses. The cause is too large to leave to the inspired few. You must play their game. You must inject the hype. You must minimise the mighty to the meme-like, until they are playing our game, hosting our servers and sharing our passions.\nAnd thus the dangled carrot…\nI’ve built an IPv6 Address Generator. “Doesn’t DHCP do this already”?“ Yes, yes. This does… less than that. It panders to the smooth-brained by barging right into the stream of capitalist consciousness: Form leading function:\n\ncafe:beef:1dea:dead:f00d\nf00d:fade:babe:1ced:c001\nface:b00c:dead:f1sh:c0de\n\nIf history has taught us anything, it’s that Minecraft is a breeding ground for the world’s influential… Which edgy scriptkiddie YouTuber can resist a Minecraft Server running on these bad boys?\nAnd since nothing can have real utility unless it has a quirky untethered theme. I’ve made it Mexican 🪅 Cinco de Mayo is coming up and we can piggyback.\nIt’s time to stop the tech bros from doomscrolling artificial dilemmas and start fixing real ones. IPv6 is not sexy. It won’t win you a talk at TED. But if we want to leave anything for our grandchildren to inherit, maybe we need to start here.\nGo generate some yourself and let’s save the world!🌍\n🍴 Fork it and forget it\n\n\n\n\n","path":null},{"url":"https://calebtrevatt.com/blog/obsidian-ai-voice-notes/","title":"Obsidian Automated AI Voice Workflows","description":null,"body":"The Problem 🤔\nFor a long time, I’ve wanted the ability to record voice notes on the go and access them later as text.\nNo, I’m not talking about simple dictation, I want something that cuts down on my distracted “umms”, “ahhs”, flight-of-ideas, and other incoherent vocalised nonsense as I drive like the incapable-of-multitasking man I am.\nFor a while, I used AudioPen, and it was pretty fantastic at condensing everything import into neat little summaries. The features have grown over the years, but I’m still a little wary of paying a subscription.\nI dreamed a little as I entertained the thought of building something out:\n\nIt would be open-source\nIdeally extendable\nLoosely-coupled to work with a multitude of tools\nWhat if it could run any workflow?\n\nI couldn’t find anything like that yet…\nSo I started building my own thing, again.\n(As if I didn’t start enough projects over my parental leave break 🤦‍♂️👶)\n\nThe Idea 💡\nAnd so ThinkAloud.md was born!\n(And at time of writing, is very much still a baby)\n🫱 Check it out! 🫲\nHere’s the gist:\n\n\nAudio Recording:\n\nUtilise Obsidian’s built-in audio recording feature to capture voice notes directly within the app.\n\n\n\nGit Sync Backend:\n\nusing fit or git extensions for Obisidian, git push is triggered to GitHub.\n\n\n\nGitHub Actions Workflow:\n\nThe push initiates a GitHub Actions workflow that processes the new voice note.\n\n\n\nSpeech-to-Text Conversion:\n\nThe workflow sends the audio file to AssemblyAI’s API for transcription.\n\n\n\nContent Parsing and Formatting:\n\nAssembly AI’s LeMUR parses the transcribed text to extract metadata and formats the content according to predefined templates.\n\n\n\nText-to-Speech (Optional):\n\nIf specified in the template, the content is sent to Eleven Labs AI for voice synthesis.\n\n\n\nUpdate Obsidian Note:\n\nThe processed content is fed back into the original note containing the voice recording.\n\n\n\nThe Doing It 🏃\nGranted, it’s a little async… I’m a bit worried that it’ll be too slow. But it’s very powerful. Anything that can run in a GitHub workflow can influence what ends up in the notes.\nMy personal uses cases are pretty much all while I’m commuting. I like to “think out” long form ideas on-the-go and review my notes quite a bit later, so granted the CI/CD workflow doesn’t fail, it should be fine for me.\nIf you’re after similar and are happy with less flexibility, I’d recommend AudioPen or Obsidian Scribe.\nThe Templates 🍽️\nTemplates guide LeMUR and Eleven Labs AI in processing and formatting the content. Here’s an example of a “journal entry” template:\n\nIn a nutshell, the syntax is pretty much this:\n\n\n\t\n\t\tNote\n\tNot really sure about the comment syntax. Markdown is funny with comments. They’re not really part of the “spec”.\n\n\nThe Power ⚡️\nSince the templates are processed by a GPT, you can get really creative 🎨 You can even chain further workflows to automate further:\n\n\nClean up ad-lib artefacts: “umms” and “ahhs”,\nmistakes, stutters, silences.\n\n\nRe-record: Swap your noisy car voice-note with a professional studio-quality voice-over using ElevenLabs.\n\n\nSpeaker diarisation: Title each reader uniquely for conversational dialogue, like for a podcast.\n\n\nJournal: Summarise your whole day as a structured journal entry with time and place context, emotional analysis, key points, etc.\n\n\nPopulate Dataviews: Populate Obsidian dataview fields, autofill tables, queries and kick-off Javascript tasks.\n\n\nIntegrate with Workflow: n8n workflows.\n\n\nBlogging: Create draft posts that match the structure and tone of your personal blog, or even publish directly to GitHub pages afterwards.\n\n\nSocial Cross-Posting: Publish to multiple social media platforms at once, respecting their various algorithms.\n\n\nBYD: Generate and publish proof-of-concept apps from spur-of-the-moment app ideas.\n\n\n\nExisting Solutions\nWhile developing this workflow, I explored existing plugins that offer similar functionalities:\n\n\nObsidian Vox:\n\nAutomatically transcribes audio notes, extracting metadata, categories, and tags.\nFrontmatter and verbatim text only, no templating or workflows.\n\n\n\nObsidian Transcription:\n\nCreates high-quality text transcriptions from media files using OpenAI’s Whisper.\nVerbatim text only, no templating or workflows.\n\n\n\nObsidian Scribe:\n\nRecords voice notes, transcribes, summarises, and enriches them with AI.\nAsk questions mid recording, automatically filled in.\nStill no workflows.\n\n\n\nThese plugins offer valuable features, and I could have settled with Vox or Scribe. But while I really enjoy Obsidian, I love the idea of being able to use this for any markdown notes, anywhere.\nBetter yet is the flexibility of being able to kick off all sorts of actions with CI/CD workflows!\n\nStay tuned for updates as this project progresses! ✨\n","path":null},{"url":"https://calebtrevatt.com/blog/stress-scapes/","title":"Stress-Scapes are Poised to Dethrone your \"Chill Study\"","description":null,"body":"The Problem\nSpotify, YouTube and Soundcloud have no shortage of lush, rainy, chill songs and soundscapes to keep you calm and stress-free as you focus on your tasks. They freckle the internet in playlists under benign keywords such as “concentration”, “focus”, “ambient”, “lofi” and “study”, you know the ones I mean. But don’t be fooled. They’re hardly harmless freckles. They’re more like malignant moles. If you don’t cut them out of your life, they will suck the energy from your very soul.\nThey mostly present in two-subgenres, with the overarching genre being Pure Evil.\n\n\n\t\n\t\tCaution\n\tTrigger Warning!\nThe next two headings contain real Spotify playlists that demonstrate the dangerous effects of these playlists.\nIf you are operating heavy machinery, pregnant or breastfeeding, have a heart condition, or are a known fall risk, please consider skipping ahead.\n\n\nLo-Fi\n\nThe cover art is an anime girl studying.\nYou can’t remember the title: “Was it ‘ambient lofi study’ or ‘lofi study ambient’?”\nYou can’t name a single artist on the playlist.\nYou can’t even name a single song.\n\nTo help you identify, see the below playlist. Tread carefully.\n\nSoundscapes\n\nThere’s no music, just sounds.\nInvolves coloured noise of some sort: white-noise, pink-noise, brown-noise.\nRain, waterfalls, thunderstorms, birds, rainforests and forest walks.\nLow-key intuition that someone French made the playlist.\n\nHere’s an example. Don’t fall asleep!\n\n\n“What’s the big fuss about? These sound nice, don’t they?” you think, probably. And yes, they do. But “nice” doesn’t put bread on the table and you know it.\nHave you ever applied for a job and employed the phrase “work well under pressure” (or some variation), somewhere in the process? No doubt you have, the stats don’t lie. You’d be in the company of 75% of the US workforce.\nNow it’s time for a self-check…\nIf you truly believe you work well under pressure, stop doing yourself a disservice and sinking yourself into a cozy aural spa-bath when you want to get work done!\nThe Solution\nTo be fair, you can’t blame yourself. Any real alternatives are sorely lacking. We need content tailored to true productivity, not whitelabelled Yoga music that makes everyone numb and dumb. Those with some self-awareness try to hype themselves up with gas-station metal or doofy B-grade gym pop they don’t even like. Productivity-centric soundscapes are the summit of sonic empowerment, yet so far out of reach, no one has dared to dream of them. Until now…\nToday I propose the concept of the Stress-Scape™…\nHere’s a taste of a single I’m working on:\n\nCorporate Skyscraper Fire Evacuation 🔥😱\n\n  \n  Your browser does not support the audio element.\n\nComplete with screams, sirens, quickening flames and all the keystrokes of a thousand employees madly finishing an email before their building collapses.\n\nI’m aware different people have different stressors, so if a burning building isn’t your thing, take heart – a full album is in the works! Including 14 hustle-inducing hits:\n#Title\n1Neverending THX Intro\n2Mass Childcare Tantrum\n3Caving Claustrophobia in C Minor\n4Corporate Skyscraper Fire Evacuation\n5No one lives in this faulty submarine\n6Airplane Baby and the Chair Kickers\n7Manager Breathing Down your Neck\n8McMedley: Beeping and Burgers\n9Hell’s Kitchen’s Kitchen\n10Untethered in Deep Space\n11Late to your own Wedding\n12A Whole Day of Hard Work with a Blocked Left Ear\n13Desperate for a Toilet in a Foreign Country\n14Family Dinner: Awkward Pregnancy Announcement\n\n\nThe Method\nFor a long time, this album was just a pipe-dream. Thanks to key innovations and cutting-edge technological advancements made possible by AI, it’s a reality.\nStress-Scapes™ implements these key attributes for peak productivity panic:\n\n\nAI-Powered Realistic Gibberish\nMany of these tracks will attempt to alienate you with highly realistic speech of almost-words, using the sonic crumbs of LLM latent-space. A foreign language is native to someone, and no one deserves to feel excluded in being excluded. That’s why we have carefully sampled phonemes from a multitude of languages, including rare ones from Arabic, German, French, Spanish, Hindi, Mandarin, Sindhi, Somali, Zulu and, Xhosa.\n\n\nDegraded AI SFX\nMany of the sound effects are completely syntheised from AI text prompts. You can thank ElevenLabs’s cutting edge generative AI audio for the sound effects and realistic office-worker chatter. While high-quality and realistic by design, adding the suffix “but just a bit off…” tweaks each sound effect to incorporate some uncanny strangeness that leaves you feeling a little bit unsafe.\n\n\nWell-Disguised Shepard Tones\nA key feature throughout the album. Shepard tones bring tension that never resolves. The sonic equivalent of stairs the never stop climbing, hidden shepard tones create the sensation of endless escalation.\n\n\nHyper-Precise Binaural Audio\nThis puts the stress where it belongs — right behind you. Binaural recordings and simulations position sounds with unsettling realism. You’ll need headphones to experience it properly.\n\n\nUnpredictable Rhythmic Disruptions\nAny mental foothold you expect in sonic patterns or structure is quickly subverted. That frustrated feeling you get when you’re between department stores that are playing two different songs? Bottled up just for you.\n\n\n\nThe End\nNone of this would work if these Stress-Scapes weren’t crafted to leave room for you.\nThey are the backdrop for your productive work and will never encroach on your main-character energy.\nKeep Calm Keep Panicked and Carry On.\n\n\n\t\n\t\tTip\n\tFor those who have questions…\n\nYes, it’s a joke.\nI am actually working on an album of Stress-Scapes.\nNo, Stress-Scapes isn’t really trademarked… Yet.\n\n\n\n","path":null},{"url":"https://calebtrevatt.com/blog/introducing-tlp/","title":"TLP - Proposing a Novel and Deranged To-Do List Protocol","description":null,"body":"Elevator Pitch\nIn a world built on innovation, efficiency, and performance, TLP—To-Do List Protocol stands out…\nFor years, to-do list apps have been little more than demos for new front-end frameworks or hyperscaler spyware masquerading as productivity tools. TLP flips the script:\n\nCompatible and Flexible: Adapters are on the roadmap to support several popular to-do apps. MIT license and a rainy day means you can support any to-do app you like.\nSecure by Design: By funnelling encrypted packets through your to-do list, you’re holding a funhouse mirror up to hyperscaler data collection. If they’re going to harvest our data, let’s make them work for it.\nFeel Productive Again: TLP doesn’t break your tasks. Your app stays functional! Your personal tasks will be ignored and treated as corrupt packets. With hundreds of tasks being added and completed every second, you can check “dopamine” off your list.\n\nTLP is a groundbreaking, TCP-inspired messaging protocol that operates through to-do lists. Yes, you read that correctly. Your humble to-do list app has been granted super-powers: unnecessary partial re-implementation of the transport layer at the application layer!\nTLP is pure joy (and pure overhead).\nCheckout the project here! 🚀\n\nWhat Is TLP?\nTLP is a satirical, semi-functional messaging protocol inspired by TCP that uses popular to-do list applications as the transport backbone.\nPackets are sent as to-do list tasks, ordered by due date and marked as complete when received. Everything is updated in real-time to simulate the mechanics of data packets traversing a network.\nMix in some disruptive hypey buzz tech, some pseudo-encryption, and we have a winner! Think of it as the most inefficient way to communicate securely with your friends while simultaneously overwhelming your to-do app.\nHow Does It Work?\nTLP is TCP inspired. It maps TCP packet fields to stock-standard to-do list task fields.\n\n\t\n\t\tTip\n\tWant to learn more about the anatomy of a TCP packet?\nCheck out this GeeksForGeeks article.\n\n\nTCP Packet FieldTo-Do AttributeDescription\nSource PortTask OwnerRepresents the individual or entity initiating the task.\nDestination PortAssigned UserIndicates the person responsible for completing the task.\nSequence NumberTask Due DateEncode sequence number in task due date to denote its order in a series\nAcknowledgment NumberTask DependenciesLast received task as checked first checklist item, next expected task as unchecked following checklist item.\nData OffsetN/AData offset (or header length) doesn’t require re-implementation to retain expected behaviour.\nReservedN/AReserved fields are placeholders without direct relevance to task attributes and can be excluded.\nFlag: URGTask Priority (High)Set the task’s priority level to ‘High’ to indicate urgency.\nFlag: ACKTask Completion StatusMark the task as complete to signify acknowledgment.\nFlag: PSHTask Priority (Important)Set the task’s priority level as ‘High’ to indicate PSH flag\nFlag: RSTTask ReassignmentReassign the task to a different user to indicate a reset in responsibility.\nFlag: SYNTask CoordinationAdd a checklist within the task for steps that require synchronization with others.\nFlag: FINTask ClosureUpon task completion, archive or remove the task to signify it’s finished.\nWindow SizeTodo ListGroup related tasks into a single list to represent the batch size.\nChecksumTask ReviewInclude a final checklist item for reviewing the task to ensure accuracy before completion.\nUrgent PointerTask Priority IndicatorUse the task’s priority setting to indicate urgency.\nOptionsTask Notes frontmatterInclude any extra instructions or information in the task’s notes as plaintext frontmatter.\nPaddingN/APadding is used for alignment in data structures and doesn’t translate to task attributes; it can be omitted.\nData (Payload)Task NotesEncrypted message as payload in task notes.\n\nMulticast??\nWhile multicast is usually out of TCP territory, TLP leans heavily on the Application Layer and implements multicast.\nIf unicast, tasks are assigned to an individual. If multicast, the tasks are unassigned and all who are scoped receive the task.\nPacket acknowledgement then becomes a race-condition. An exciting little competion in an otherwise very cooperative standard.\n\nWhat’s Next for TLP?\nIn the coming posts, we’ll explore more of TLP’s tech spec and dream about the necessary components to get it off the ground, including, maybe:\n\n“Adapters” to interface TLP 🔌🔀 with popular to-do list apps.\nFinding the Unicorn 🦄✨ of high-throughput to-do list apps.\nOverengineered blockchain integration 🧱⛓️ for authentication workflow.\nDifferent methods\n\nJoin the Revolution\nTo-Do List Protocol is a call to action. It’s a powerful reminder of what an industry shake-up can do. Do you know how diffusion based generative models work? The same way high school art assignments work. They throw something random at the canvas, interpret the results and learn from their mistakes.\nJoin us! Don’t chase the money. stop following the cues. Subvert the status quo.\nJoiin us for the next installment of the TLP Blog Series!\nExplore TLP on GitHub\n\nStay productive. Stay creative.\n","path":null},{"url":"https://calebtrevatt.com/blog/two-types-of-programmers/","title":"The Two Types of Programmers","description":null,"body":"You’re not bad at programming; you’re bad at unrealistic expectations.\nThe OG Goal Posts\nI used to think a “good programmer” looked like this:\n\nPolyglots, fluent in so many languages that picking up a new one is child’s play.\nMasters of their craft, able to build anything from scratch effortlessly.\nThe kind of people who reinvent the wheel for fun—writing an operating system, a compiler, or even an assembler from the ground up.\nLeaders of massive open-source projects, boasting 20k+ GitHub stars.\n\nHow do you feel about that list? Are you a “good programmer”?\nIf you’re like me, the answer is no. Here’s what changed my mind.\n\nThe Two Archetypes\nI watched a video recently by Coding with Lewis called “The 2 Types of Programmers”. In it, Lewis suggests there are two programmer archetypes: craft-based and result-based programmers.\nCraft-Based Programmers\n\nPrioritise code quality, maintainability, and optimal solutions.\nOften serve as open-source maintainers and code reviewers.\nGo the extra mile to implement their own solutions rather than rely on existing tools.\nAre deeply passionate about the art of programming.\nExample: Linus Torvalds, known for his perfectionism and attention to detail.\n\nResult-Based Programmers\n\nFocus on speed and the final product.\nFrequently work in start-ups or as content creators.\nEmbrace existing tools and solutions to accelerate progress.\nAre driven by what the program enables or creates.\nExample: Mark Zuckerberg, known for his “move fast and break things” philosophy.\n\n\n\t\n\t\tImportant\n\tIf you haven’t seen the video, go show @CodingWithLewis some ❤️\n\n\n\nThe Revelation\nListening to Lewis, something clicked for me. I realised my definition of a “good programmer” was entirely based on the craft-based archetype. But the other half of the spectrum—result-based programmers—is just as valid.\nLooking at the two lists, I’ve never been a craft-based programmer, and truthfully, I don’t want to be. It’s not how I’m wired. I’ve always been drawn to the magic of results—seeing a program come to life and watching it solve real problems. That’s what makes me excited to code.\nI realise now that I’ve had impostor syndrome holding me back. I’ve been overcautious. I thought I had to fit into a mould that didn’t suit me. I tiptoed around projects, overthinking my choices and hesitating to jump in. Whatever I chose felt like a major investment: I’d need to master it, build my 10-year BDFL project on it, contribute upstream— that sort of thing.\nBut knowing there’s a whole world of successful programmers who think how I do? That really reset my goalposts. I don’t need to rewire my brain to be what I’m not. It’s liberating. I feel validated, encouraged, and motivated to keep going—on my terms.\n\nThe Key to Joy in Programming\nInterestingly, I still have craft-based inclinations, but when I lean into them too much, I find myself working in my weaknesses: premature optimisation, brittle abstractions, stuck reinventing wheels for a car I later realise I don’t really want. Beyond a certain depth, I lose sight of the magic and stop having fun.\nInstead, my strengths come alive when I focus on the result: exploring, building, and deploying new tools and technologies; immersing myself in the melting-pot marketplace of open source, where people exchange code and comments as both developers and users. That’s where I find joy—that’s where I see the magic.\n\nSo, here’s my takeaway for you:\nLook at the two archetypes. Which traits resonate with you? What brings you joy in programming? Have you had your own narrow definition holding you back?\nAt the end of the day, the best programmers are the ones who find joy in their work and play to their strengths.\nYou’re not a bad programmer. You’re just you—and that’s plenty.\nAnd just for fun…\n\nRemember…\n\n\t\n\n\n\n","path":null},{"url":"https://calebtrevatt.com/blog/you-are-here/","title":"Could I be a Test Engineer?","description":null,"body":"Could I be a Test Engineer?\nIntroduction\nThis post is first of a planned series that explores the idea of leveraging AI to “try on” different careers.\nLike many professionals, I’ve accumulated a broad and eclectic skillset but found myself wondering how to bridge gaps when exploring new opportunities. Using AI as a career co-pilot, I’ll share roadmaps tailored to roles I find fascinating, beginning with this post.\nHere’s how I’m using AI:\n\nAssess my compatibility with a role posted on LinkedIn.\nCreate a roadmap of skills to bridge gaps in my knowledge.\nGenerate a mermaid flowchart that visualises the roadmap.\nTailor my resume and cover letter for the role (optional).\n\n\n\t\n\t\tWarning\n\tWhile AI can provide valuable insights and suggestions, it’s important to approach its career guidance with a critical mindset. AI models can have biases, make mistakes, or provide outdated information. Always verify AI-generated advice through:\n\nIndustry professionals\nOfficial documentation\nRecent job postings\nProfessional communities\n\nThis series demonstrates one way to use AI as a career exploration tool, but should not be your only source of guidance. Make informed decisions by combining AI insights with real-world research and networking.\n\n\n\nMy Background\nI’ve always been passionate about technology. I got my first computer at 12. Its performance was shocking… Probably 10 years old when I got it. It barely ran XP, but I was determined to squeeze every last bit of juice out of it. My Dad had heard something about Linux in his sysadmin days and gave me a thick copy of a RedHat manual that was probably 10 years older than the computer. I read that thing late into the night and felt like I’d discovered a whole new world of computing.\nBefore long I was running Ubuntu Jaunty Jackalope full time.\nMy Dad was actually pretty proud of me. Proud enough he mentioned it in his speech at my wedding.\nComputers aside, I grew interested in photography, then videography, then film. I pursued film in high school and university, but the job market in my part of the world was oversaturated and underpaid. Instead, of Hollywood, I found myself working at a startup specialising in virtual tours. Unlike editing feature films, these virtual tours only ever went together in the intended order. I quickly discovered how automation could streamline the repetition. My automations became more advanced and I picked up AutoHotkey 🎹, Javascript ☕️ and Python 🐍 on the way.\nThis spark led me to software development and later IT administration at a high school, managing Apple and Windows endpoints using Jamf, Intune, and SCCM.\nAt time of writing, this is where I remain.\nNow, with a growing family, I’m on the hunt for a remote-friendly role that offers better work-life balance and financial stability. While my eclectic background has rounded out my skills and made me a better problem-solver, it’s also left me with gaps that complicate job applications.\nSo, I had this idea: what if I asked AI to help me bridge those gaps?\nThat’s where this blog series comes in — to map out actionable steps for career transitions.\n\nTest Engineer: An Overview\nTest Engineers ensure the quality and functionality of software through systematic testing processes. They create and execute test plans, identify bugs, and collaborate with developers to improve software reliability. This role is ideal for detail-oriented individuals who enjoy problem-solving and optimizing systems.\n\nRoadmap to Becoming a Test Engineer\nPhase 1: Foundations of Software Testing\nWhat to Learn:\n\nUnit tests, integration tests, and regression tests: what they are and why they matter.\nThe Software Development Lifecycle (SDLC) and the role of testing.\nPython’s unittest module to write basic tests.\n\nWhat to Do:\n\nWrite unit tests for a small Python project.\nPractice Test-Driven Development (TDD) with simple scripts.\n\nPhase 2: Tools and Automation\nWhat to Learn:\n\nTesting frameworks like pytest and nose2.\nCI/CD tools (e.g., GitLab CI/CD) for automated testing.\nWriting shell scripts to integrate automated tests into workflows.\n\nWhat to Do:\n\nSet up a GitLab repository with a CI/CD pipeline that runs tests.\nAutomate repetitive tasks like test deployments using scripts.\n\nPhase 3: Advanced Testing Techniques\nWhat to Learn:\n\nShift-left testing: catching bugs early in the pipeline.\nBasics of performance and security testing.\nSetting up Dockerized testing environments.\n\nWhat to Do:\n\nUse Python tools like responses to mock APIs in integration tests.\nTest a Python web app’s performance with tools like Selenium or Locust.\n\nPhase 4: Collaboration and Open Source\nWhat to Learn:\n\nDocumentation practices in collaborative testing environments.\nQuality assurance strategies in large projects.\n\nWhat to Do:\n\nContribute to an open-source project by writing or improving test cases.\nBuild a portfolio showcasing your contributions and testing expertise.\n\n\nVisualizing the Plan\nHere’s a roadmap of the above plan:\n\n\nFinal Thoughts\nEmbarking on a career transition can feel overwhelming, but breaking the journey into phases makes it manageable. By focusing on foundational knowledge, hands-on practice, and collaboration, anyone—including me—can work toward becoming a Test Engineer.\nIf you’ve walked this path or have resources to share, I’d love to hear your insights in the comments. Stay tuned for the next post in this series, where I’ll tackle another role with the help of AI!\n","path":null},{"url":"https://calebtrevatt.com/blog/how-to-blog/","title":"I think I might suck at blogging...","description":null,"body":"The Problem\nI changed my theme recently. I actually changed my whole website. I was wrestling with some build issues in Hugo, so I switched to Zola. So far, so good.\nIn porting my old posts, I realised they were Very Poor Quality.\nI was a bit disappointed to find out how much even I didn’t want to read these posts 6 months later.\nClearly I needed to work on this if I was going to ramp it up again. So, like many of modern first-world problems, I took it to ChatGPT with a kind of hopeful curiousity it would give me a magic solution:\n\n“I’ve tried to get into blogging, but whenever I start, the blog post gets way too big, the meaning gets mushy and even I wouldn’t want to read it. I’ve got three or four so far and they’re all enormous and really boring.\nThey also take a huge amount of effort. And my post frequency has gone way down because of it. I guess that’s becayse I’ve started dreading doing it.\nI want my posts to be meaningful. First and foremost to me. I want my blogging to be an extension of my note taking, but be the really important or useful/thoughtful stuff that helps others, or stuff I really want to highlight to myself so I don’t forget.\nHow do I blog better?\nHelp me, Obi-Wan Kenobi. You’re my only hope.“\n\nThe Solution\nThus, the Oracle responded:\n\n“It sounds like you’re caught in the common trap of over-ambition when blogging, where the desire for perfection or depth makes the process unwieldy and unenjoyable. Here’s a framework to help you blog better”\n\nA Better Blogging Framework\nIt sounds like you’re caught in the common trap of over-ambition when blogging, where the desire for perfection or depth makes the process unwieldy and unenjoyable. Here’s a framework to help you blog better:\n\n1. Redefine What “Meaningful” Means 💭\n\nA post doesn’t have to be exhaustive to be meaningful. Focus on one insight, idea, or question per post.\nYour blog can serve as “working thoughts” rather than finished masterpieces. Treat it as an ongoing conversation with yourself and your readers.\n\n\nDefinitely struggled with this one. I would start a post, and then think “well, I should probably expand on this, or add this, or include that…” and then I’d end up with a massive post that didn’t really adhere to the idea I wanted to share. It would just become a preachy jumble of thoughts.\n\n\n2. Start Small and Specific 📝\n\nBreak your ideas into smaller pieces. If your draft is massive, split it into a series of posts. For example:\n\nPost 1: The problem or context.\nPost 2: An insight or solution.\nPost 3: Reflection or practical application.\n\n\n\n\nAgree 👍 I think if I can exercise #1 properly, I won’t actually need to do this often. Unless it’s a great topic worth a lot of conversation.\n\n\n3. Write for Your Past Self 🧒 ⬅️\n\nImagine you’re writing to help a version of yourself from 6-12 months ago. This will:\n\nSharpen your focus.\nKeep the content relatable and actionable.\n\n\n\n\nInteresting. I took the popularity of the Learning in Public movement as permission to write publicly as a non-expert, but I keep finding myself writing as if I am an expert. Maybe that’s an ego-check.\n\n\n4. Use Templates to Structure Posts 📄\nA template can help keep your writing concise and focused:\n\nHook: Why this topic matters (1-2 sentences).\nMain Idea: What’s the core point you’re sharing?\nSupporting Points: 2-3 short paragraphs that back it up.\nReflection or Call to Action: What’s the takeaway? How can this help others or yourself in the future?\n\n\nI’ve never done this. I’ve always just written. I’ll give it a shot.\n\n\n5. Limit Writing Time ⏰\n\nSet a timer for 30-60 minutes. Treat it as an experiment in speed and clarity.\nPublish after one or two edits. Imperfect but consistent posts are better than perfect ones that never happen.\n\n\nI really like this idea. I’ve been getting into the Pomodoro Technique recently and I’m finding it really helps. This could be a healthy application of the same principles.\n\n\n6. Treat Your Blog Like a Curation Space 📚\n\nIf a full blog post feels too heavy, share:\n\nA key takeaway from a book or podcast.\nA solution to a problem you solved at work.\nA reflective “aha moment” in a few paragraphs.\n\n\nThese smaller posts still add value and showcase your thinking.\n\n\nReally good idea. I’ve done that a little for social media (LinkedIn and Twitter) but I hadn’t practiced that with blogging.\n\n\n7. Iterate and Expand Later\n\nA blog post doesn’t have to be a final product. Treat it like a “version 1.0” that you can refine or expand over time.\nLink posts together, turning smaller pieces into a cohesive body of work.\n\n\nWhile I like the idea, I think I lack the discipline to practice it. I’ve mentioned things I want to cover at the end of previous posts, and then never got back to them. Maybe I’d rework this as #2. If I think it needs to be expanded, I’ll either make sure I’m really committed to finishing it or I’ll draft the post and split it up once the whole series is finished.\n\n\n8. Write What You’d Want to Read\n\nUse bullet points, bold headings, and concise sentences. These make posts more readable and less intimidating to write.\nAsk yourself: “If I stumbled upon this, would I read it?”\n\n\nDefinitely have not been doing that. Clearly 😂\n\n\n9. Use Feedback Loops\n\nShare drafts with trusted peers or mentors for feedback. Their perspective can help you identify mushy sections.\nAnalytics can also reveal which posts resonate most.\n\n\n👍\n\n\n10. Remember: Blogging Is Practice\nEvery post improves your ability to communicate ideas effectively. Even “boring” or “imperfect” ones are a step forward.\n\n🤗\n\n\nNext Steps\n\nChoose one of your massive drafts junky old posts. Extract a single idea and rewrite it using the template above.\nPublish it quickly. Don’t overthink it.\nCommit to a smaller post for your next one to build momentum.\n\nBy focusing on these practices, you’ll find blogging more manageable and rewarding while steadily building a meaningful portfolio of posts that reflect your growth.\n\nFinal Thoughts\nI doubt you’re reading this because you want my thoughts on blogging.\nIf you wanted help with blogging, you could have asked ChatGPT yourself!\nYou know that. I know that. So why did I write this at all?\nTo keep me accountable.\nI may not follow to the letter, but if it’s here amongst my other posts to keep me in check.\n\n\t\n\n\n","path":null},{"url":"https://calebtrevatt.com/blog/how-dry-should-i-be/","title":"How DRY should I be?","description":null,"body":"The Problem\nI love writing abstractions.\nIt appeases my “ducks in a row” desires. It makes my code tidy and I feel like a pro calling my nifty functions.\nThe problem is, it doesn’t take too long before I get backed into a corner and the tidiness unravels into spaghetti.\nWe’ve all done this.\nIt feels great to make magic, but magic gets messy when you need to fix it.\nIf you’re like me, you’ll claim you’re not doing it for the magic by hiding behind the intelligent cause of staying DRY.\nFor the unfamiliar, DRY stands for Don’t Repeat Yourself. It’s a software development principle designed to reduce redudancy and maintainability issues.\nIn a nutshell:\n\nProductivity: Writing logic once and reusing it reduces typing.\nReadability: Less code means less to read. And we read a lot more code than we write.\nMaintainability: Less code to read means less to fix when things go wrong.\n\nAt least that’s how I understand it.\nThe term was first introduced in the book The Pragmatic Programmer, advocating:\n\n“Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.”\n\n\nI don’t know how, but maybe it’s just because its so simple… This is the one thing I just innately overdo. When I see those capital letters online, I feel like I’m around my people. They get me. It resonates with the same immature hype that the minimalist movement had. Clearly important elements of truth that people have either drastically under or over-actioned with no clear markers in place to measure effectiveness.\nI’m going to be honest. I have not read the book… maybe my understanding of DRY is incomplete or immature, but I’m going to hazard a guess that most people who “practice” DRY haven’t read it either, probably not even you.\nI imagine if there is “true” nuanced DRY, most developers aren’t familiar with it.\nSo here’s my hot take.\nI don’t think programmers need any encouragement to be more DRY.\nUs programmers don’t like repeating ourselves. We work out pretty early that it’s easier to use functions and variables than it is to copy and paste code all over the place like 5 year old scrap-bookers.\nWe want elegance and flow; we like watching code dance for us. The problem is, if we don’t control that obsession, we end up dancing for the code.\nExamples\nAs soon as something becomes repetitive, we have the choice of leaving it in or reaching for an abstraction.\nAbstraction #1: The Humble Variable.\n\n\nNice. It works. But eww. If we know we want to print and log for all sorts of code throughout the project, that’s gonna get repetitive. And it’s not very future proof if we want to send that output to more “sinks” in the future. Say I have 26 prints to stdout throughout my code. What if I now want to add the feature to send a fax every time I print? (A perfectly reasonable goal).\nI would have to update the code 26 times. DRY says no!\nI guess we could use a function?\n\n{{% videogif src=“wuphf.webm” %}}\nMuch better! Now my action is a single line function call that wraps five statements. I just saved myself 121 lines of code! Let the minimalist addiction kick in. Concise and maintainable.\nBut what if I need a little more flexibility? Maybe I don’t want to fax or tweet every time. Just most of the time. I don’t want to have to create another function called wuphf_without_fax_and_tweet. That’s clearly dumb. Let’s make our existing function more flexible.\n\nNow I’m really solving problems. Look at all the work I’ve moved into the function ready for repeat use! My function only needs one mandatory argument. That’ll keep my function calls concise.\nBut ahem as “useful” as our new function is, it’s a bit wordy itself. If we write a lot of functions like this, our file might be getting pretty chunky. I don’t want to see these utility functions shadowing out the rest of the business logic, now do I??\nWe need to get organised.\nLet’s put it in another file out of the way somewhere and import it. We’re bound to add additional functions of a similar nature, they can just live in that module too. We may as well start moving any other wordy functions to their own modules and just have a tidy-up while we’re at it.\n\nDone! Easy. Works great. Rinse-and-repeat as you please and your main script is going to look so tidy 👌\n\nIt’s a Trap!\nThis is obviously a silly example, but it illustrates a trap I honestly fall into:\n\nI abstract for repeat use\nI add more functionality to the abstraction (uh, oh, function is no longer single responsibility)\nI move similar functions into a module\nI need more functionality but have to dance around to implement it.\nI think I’ve fixed it, but one fix somewhere causes a break somewhere else since there are so many calls to my now overcomplicated, fragile function.\n\n{{% videogif src=“leak.webm”%}}\nIf I knew I needed the flexibility of notifying to different services, I wouldn’t have done the abstraction like this to begin with. Functionality that should exist as statements in the main script now exists two layers deep.\nNot that I’d wish Notepad on someone as an IDE, but… good luck navigating without Intellisense.\nWe haven’t even touched classes.\nStuck with the Cheque\nPotential downsides of abstraction:\n\n\nComplexity. Abstraction can turn simple code into a navigation nightmare. A code block becomes a function, then a file, then a module. Code functionality can become hidden deep in the codebase.\n\n\nBrittle. Abstractions can create unnecessary hoops to jump through in order to anticipate future needs that may never materialise. These hoops constrain the way we write code that interfaces with it. If the code that needs it can’t change, we end up having to change the abstraction and potentially any other code that’s already used it.\n\n\nMaintainability. Code that’s complex and brittle is already hard to work with. What about anyone in the future who has to work on that code? Can they learn it quickly? What about yourself in a weeks time?\n\n\nPremature abstraction is basically blind refactoring. We don’t want to refactor later when we have the facts, let’s refactor now without them!\nMitigation\nAlright, so too much DRY can lead to brittle abstractions. How do we find a good balance?\nWell, being aware is a good first step. Hopefully, you can analyse your own dev journey and see where you lie on that spectrum.\nYou might be doing great and this is all for someone else.\nBut if this is for you, read on. Here’s a few things that have helped me.\nConsider Abstraction Usefulness\nBe honest with yourself. Ask yourself these questions before you get your hands dirty:\n\n\nHow likely are you to need this later?\n\n\nIs there something more generic that does the job?\n\nIf so, exhaust those options before rolling your own!\n\n\n\nHow nested is your code?\n\n\nWhat do you gain in making a code block a function?\n\n\nWhat do you gain in moving a set of functions into a class?\n\n\nWhat do you gain in moving a set of functions/classes to a separate file (module, script, etc.)?\n\n\nFile Length\nIs your file getting too long?\nAre you tired of scrolling up and down so much?\nTo be honest, it probably isn’t too long.\n\n\nAre you using code folding shortcuts effectively?\nYou can collapse by different levels of indentation. E.g. If you have a set of test functions defined at one indentation level in, you can fold all the function definitions into their titles with ctrl/cmd + k, ctrl/cmd 1. Each indentation level deeper is a higher number.\n\n\nAre you using “Peek”?\nVS Code has an option to jump to function definitions from references to a function elsewhere (Go to Definition). It also allows the inverse, listing references from the definition itself (Go to References). Use ctrl/cmd + left click or shift + F12 and option + F12 respectively. Using Peek to perform these navigations gives you a little window to work with, so you can update a reference (or several) and not have the mental overhead of finding you way back to deal with.\n\n\nAre you using cursor history navigation?\nVS Code has a “Go forward” and “Go back” functionality for the cursor. If the Peek window isn’t enough and you just need more visual context, or hindsight is 20/20 and you need to go back somewhere that wasn’t a linked function definition/reference, you can navigate to where your cursor was last and back again.\n\n\nAre you using “Rename Symbol”?\nThis one’s a stretch, but if you find the possibility of similar names causing rename conflict has you wanting to split your file, consider using Rename Symbol. If you need to change the name of a function or variable everywhere you might not want to change every instance of the word too. Say you have a function named, “file”, but you realise a little late that file is actually a built-in variable in your language that shouldn’t be overriden. If you run “find and replace”, every instance of that word will change, including instances of that built-in variable and any time you used the word “file” in inline comments or as part of a name in any other variables, function calls or methods, etc. Using Rename Symbol ensures you don’t mess with that other stuff.\n\n\nLearning how to navigate in your IDE efficiently will help prevent you from segregating your code out of navigation frustration. When you think you’ve maxed out your ability to grasp navigation tools, if it feels like there’s too much going on in a file, then consider moving stuff.\nIf after some time you can see sections that have discrete responsibilities that you have not edited in a while, you can try moving them, but consider what you will lose and what you will gain carefully!\nThere’s plenty more to consider. Use the IDE’s outline, breadcrumbs, etc.\nCode Complexity\nCyclomatic complexity is a metric that measures the complexity of a program by counting the number of linearly independent paths through a program’s source code.\nEssentially, it’ll help you keep yourself honest with stats that tell you when you’re a bad boy. Too many nested if statements in a single function, that sort of thing. It won’t help you with Separation of Concerns (if that’s a principle you follow), but it will help you with keeping complexity low. Unnecessary complexity is what makes a brittle abstraction.\nIf you’re using Python, consider using Ruff as your linter (and formatter). It enables McCabe’s complexity rule for linting by default (c901). It’s written in Rust, is very fast and includes support for a lot of linting rules.\nSnippets\nSnippets are blocks of text that you can inject at your cursor.\nIf we’re talking code, snippets are a great way to inject common code patterns.\nThey offer a template for a common pattern, like looping or conditional statements.\nI’ve never much used snippets until recently.\nI’ve had to push through some mental friction in using them.\nPart of me feels if I use snippets, I’ll forget how to write the code patterns they inject.\nIt’s like trading memory-space; if I need to remember the name of a snippet and a keyboard shortcut for it, I’m going to forget the code pattern.\nFortunately, this isn’t true. How you get your code into the IDE matters a lot less than understanding what it does.\nSometimes, I find myself staring at the flashing cursor with 10 different for-loop implementations fighting for my attention.\nSnippets help take this load off a bit.\nVisual Studo Code has a built-in snippet feature that you can use to create snippets.\nThere are also a heap of snippets published on the VSCode marketplace as extensions.\nWhen you insert a snippet in VSCode, you can tab through the required variables to quickly fill them out.\nOther IDEs have similar implementations.\nif you find youself needing snippets across IDEs, code editors in browsers or quickly in a terminal, consider using RayCast if you’re on a Mac – for a bunch of reasons, snippets being one. Raycast allows snippet injection globally, anywhere you can type. It also includes support for dynamic placeholders (variables).\nIt goes beyond code. It’s handy for templating emails, Zendesk tickets, whatever you can think of.\nI’ve also used Espanso, KeyboardMaestro, and AutoHotkey on Windows.\nThey all have their own unique features, but support snippets at a minimum.\nAI Assistance\nAI Autocomplete is different. It often completes what I’m going to type and of course, I get to accept or deny the suggestion.\nThis is one less cognitive hurdle compared to snippets, I’m not trading any mental real-estate to remember a trigger.\nIt comes with the huge added benefit of being intelligent:\n\nYou don’t need to add any snippets manually\nCompletions are fully dynamic, using the context of your file, repo or even whole codebase\nCycle through multiple suggestions if the first one doesn’t work\n\nI’ve been using Sourcegraph’s Cody as an alternative to the non-free Github Copilot.\nI did some work on a frontend with react-form-json-schema and PowerShell as a backend (WILD stuff – see the amazing Powershell Universal platform). Because the LLM was familiar with the larger react-form-json-schema project, it had no trouble translating that into my niche PowerShell codebase. All the form validation is in native PowerShell with very consistent Test functions for each field:\n\nAfter writing a couple of these validation functions, Cody pretty much did the rest. All my fields were defined in the schema. Cody pre-empted each line I needed. Even the comments.\nIt even replicated my weird Write-Host stuff with “ERROR” and “INFO” prefixes (PU sends Write-Host to the browser console, but not Write-Debug/Info/Error).\nIf your code is predictable enough, you may find AI autocomplete does a fine job of anticipating your structure. This in a way is a good marker of your consistency as a programmer. If you find it anticipating your code well, you might find that the mental strain of yourself anticipating your code is also lowered.\nAI isn’t always going to have the completions you want, but it is a step up from snippets for cutting through the tedium.\nJust be aware that when you don’t want a suggestion it can be a bit of a nuisance and suggest a completiion if you pause for too long.\nIn my opinion, this is more annoying than you’d think. If you struggle with maintaining a train-of-thought, unwanted completions will derail you quicker.\nRegarding DRY itself, if you find a block of code you think could be more concise, ask Cody to rewrite it. See what it suggests.\nAI prompting\nWe’re all familiar with ChatGPT by now.\nThe most recent model GPT-4O has really impressed me. I’ve received some great working code examples from it that just worked out-of-the-box. The Powershell Universal project above, it’s all in one file, 400 lines of code. I pasted that into ChatGPT and asked for a few changes and it sent it right back, changes applied. It actually became more convenient to ask for changes I knew how to make directly within ChatGPT itself. By the time I could make the necessary modifications to the FormSchema, UISchema and “Test” functions myself, ChatGPT would’ve finished writing the whole script out again from scratch.\nI’m excited to see more convenient coding workflows pop up.\nConsider Cody, ChatGPT, GitHub Copilot, Groq, Ollama and Mods to name a few AI tools… and Cursor, for an AI first IDE. This seems to be getting better by the day.\nEnvironments\nConsider your production and development environments. How will it deal with your abstractions? Is it going to play with a modular codebase nicely?\nEnvironments can be the difference between a project building successfully or not. If manual changes to the code are required to deploy in common environments, merging upstream changes from git gets messy. This is not a fun experience for your users.\n\n\nPortainer has a great GitOps style integration for its Stacks feature. It works great with a docker-compose.yaml and .env, but it won’t easily handle sidecar yaml configs or a docker-compose.override.yaml. Does the configuration need to be abstracted into multiple files?\n\n\nPowershell Universal has an internal repo that is not designed for manual updates because of the way file-watching works to reload downstream services. Creating and importing modules can get a bit prickly without proper planning.\n\n\nApplication hosting services like Fly.io expect a certain file structure. Keeping your code in line with recommendations might be important to prevent refactoring later.\n\n\nCan your planned abstractions be used later in this codebase? How about in future projects?\n\n\nCan you release code in a way to make abstractions more compatible?\n\n\nFrameworks, Libraries and other Dependencies\nThis one takes good judgement. Both of the follwing statements are true:\n\nThe best kind of abstractions to work with are ones you didn’t write\nThe worst kind of abstractions to work with are ones you didn’t write\n\nProvided you are careful about the dependencies you choose, you can find yourself with a featureful set of abstractions that are well scoped, well planned, maintained, secure, rarely include breaking changes and have a healthy community happy to support.\nNothing lasts forever, but good dependencies should outlast your own projects.\nWhen choosing dependencies, check:\n\n\nIt doesn’t do too much.\n\nDepedencies that do too much become a greater risk to your code if they become unmaintained.\nPoor scoping may also be indicative of poor planning and more difficult maintenance.\n\n\n\nMaintainer engagement.\n\nAre issues responded to in a timely manner?\nAre pull requests reviewed?\nAre new features added?\n\n\n\nIt has a healthy community.\n\nAre users asking questions and getting answers from the community?\nIs there a dedicated place for discussion?\nIs the community engaged with the direction of the project?\n\n\n\nIt’s mature.\n\nDoes it use semantic versioning?\nAre they in Alpha/Beta or Release Candidate stages?\nHave they released a 1.0.0 version yet?\nIs the project prone to breaking changes?\nLinters? Formatters? CI/CD workflows?\nWhat sort of tooling is used for development?\n\n\n\nDocumentation.\n\nIs the code well documented?\nIs the code well commented?\nIs there lag between the main branch and docs?\n\n\n\nSource Code.\n\nIs the code well structured?\nDo you understand it?\nCould you confidently make contributions to it if you needed to?\nHow much code is there?\nHow abstract is it? 😏\n\n\n\nRolling-your-own has maintainability implications, but at the end of the day, it’s code you wrote and understand.\nVulnerabilities in that code won’t go away unless you fix them, but you’ll be safe from supply chain attacks.\nDependencies come with whatever their maintainers decide to put in their code. A healthy open-source community may detect and mitigate security vulnerabilities, fix bugs, add docs and maybe even introduce new features. An unhealthy community can lead to stagnant, vulnerable, out-of-date code that may even stop working with other dependencies or language versions.\nChoose wisely!\n","path":null},{"url":"https://calebtrevatt.com/blog/getting-good/","title":"Getting Good","description":null,"body":"Handling Weakness\nWhen it comes to programming, I’m very visually orientated. I struggle to grasp theoretical concepts that don’t have physical real-world analogues.\nYeah. I love analogies. Too much.\nFunctional programming. I struggle to visualise it. I love its elegance (when it works), but I am so unproductive in it. I know it has a steep learning curve, but I’m not joking. I don’t think I’m smart enough to use it efficiently, at least not in a professional capacity.\nYou can add to that list:\n\nKubernetes\nAuthentication\nCryptography\nProbably 90% of networking\nCloud architecture\nML dev\nUI/UX\n\n\nHealthy Constraints\nLargely, I’ve been able to look at those things and go, “It’s okay. I probably didn’t want to be a network administrator anyway”. There is a blessing in constraints; if the road is as wide as it is long, we wouldn’t know which direction to go.\nSome of that other stuff is harder to look past. “How am I gonna be a decent software developer if I can’t make a decent UI?” and I get really caught up on it.\nIt would have been fine for Batman to go to a zoo and look a bat in the eye a few times a week, maybe pet one, and call his phobia dealt with. But he took it too far and became a bat-themed vigilante. But I love that. I want to be like Batman and turn my weaknesses into strengths, face my fears and GET GOOD.\nLike Batman, I’ve gone down the rabbit-hole on my weaknesses.\nUnlike Batman, I haven’t been as successful.\nI don’t want to just be okay at frontend dev, I want it to become a strength. So I muster inspiration, it becomes the focus, I form unrealistic expectations about my progress and I lose inspiration. Rinse and repeat.\nInstead I should let these weaknesses constrain me and redirect me in my strengths to where I can progress. Like gutter guards when bowling; feel the feedback, bounce back, and keep moving forwards. Let your weaknesses provide you with focus.\nWhen to Push\nThat isn’t to say you should never front up any weakness.\nYou need to use good judgement.\nSay you suck at cloud architecture.\n\nHow did you get here? Is it relevant?\nCan your goals be met another way?\n\nIf not…\n\nWhat do you lack that has produced this weakness?\nIs it just experience?\nDo you need to get yourself out there?\n\nOr…\n\nDo you lack talent and skill too?\nDoes it really grind your mental cogs?\nDo you catch yourself tuning out because it doesn’t engage you?\n\nDon’t try to force your brain or your personality into something it isn’t.\nBe honest with yourself. As before, take the best you can from these limitations.\nAmbidexterity\nSome weaknesses are present because they are strengths in other areas. They exist on a spectrum. You might not be great at administering organisational policy or configuration, but excel at creating organic community around open-source projects. Maybe people energise you but data doesn’t?\nSome things are a left-right brain tug-of-war and it’s simply rare to be “ambidextrous” and have both. Check your weaknesses for corresponding strengths. Let those discoveries motivate you and inspire you and kick that imposter syndrome in the butt.\nOther things exist on that same spectrum and can be changed, but will cost you territory somewhere else. The strengths that make someone a great counsellor may have to be abandoned if they want to be a ring-in CEO who saves companies from the edge of bankruptcy.\nBut what about where you are ambidextrous? If you find something in yourself that is traditionally a rare coupling of strengths, use that in putting yourself that your counterparts are not. Got video-editing chops? Know how to code? How about use that to create dynamic, programmatically generated content!\nAugmenting Weakness\nSometimes you just have to eat your vegetables and push through. You need to get familiar with an unintuitive process in a role that you otherwise enjoy. That doesn’t mean you tap out and go on the hunt for your unicorn, but it doesn’t mean you have to endure it vanilla either.\nFortunately, we live in the age of AI. GPT-4O, Copilot, Gemini and Claude are all advanced enough to search the internet and provide great answers for topics they may not even have training on. RAG is affordable and easy. Let AI be your tutor and translate obtuse documentation for you.\nAI Tools\nI was messing around with Powershell Universal the other day (for some quick form validation with backend Active Directory commands. I spent a few hours over a week getting into the nitty gritty of form components and schemas.\nOut of curiosity, I tried asking GPT-4O to build me a form with my laundry list of fields and validations. To my surprise, it pumped out several hundred lines of code that only needed two adjustments to build and render successfully. I let it know and the successive builds were perfect every time. Prompting with further changes became quicker than navigating the code and adjusting it by hand.\nAm I a frontend wizard now? Hardly. But it’s an augmented weakness now. It gets the job done and it doesn’t drain my mental capacity anymore. I can focus on what I’m good at.\nSome more AI tools (all free):\n\nCody (Sourcegraph’s AI IDE assistant)\nMods (Command-line pipeable AI)\nOllama (Offline self-hosted LLMs)\n\nWhat you don’t know\nYou don’t know what you don’t know. GPTs traditionally struggle with complex questions founded on poor understanding of the problem.\nRemember the “Chat” in Chat-GPT.\nYou don’t need to give mega-prompts.\n\nAsk the right questions.\nAsk broad questions.\nAsk smaller questions.\n\nIf you don’t know enough about the problem, don’t constrain AI to provide you with a solution that fits your suggested implementation of a solution.\nThe more you understand what you don’t know, the better chance you have of learning what you do need to know. It’s very easy to learn in the wrong direction.\nCommunity\nBest for last.\nSometimes you need more organic discussion with specific experience. I.e. a real person.\nIf you have co-workers, ask them, and ask them if they know anyone too.\nAfter your physical circles, try online communities:\n\nGitHub discussions, issues\nRelevant subreddits\nDiscord servers you find on Youtube channels\nForums (especially if they’re Discourse based)\nLinkedIn (surprisingly)\n\nUnlike GPTs who can listen to your thankless questions all day, community works best for everyone when involvement is not transactional, but relational. I’m not just talking about manners. You will get more relevant, helpful information when you prioritise relationships, and it will be more enjoyable.\nDon’t underestimate the value of individuals. If someone has an answer for you, they likely have other relevant experience that could be useful to you, and you to them. When you do work you’re interested in, good at, and can find others of like-mind, you’re basically just making friends.\nTech-bros could learn a bit from truckies here. Truck drivers seem to know everyone and they’ll “know a guy” for every job. We think we contribute to community when we share spicy memes or goofy comments with people we don’t know on socials, but that’s not it. Find your crowd and get to know its people.\nThink about it yourself, if someone asked you if you “know a guy” in your tech circles. Would you point them to a person or a URL? Let that be your criteria for community.\nSumming up\n\nFind out what you’re not good at.\nDetermine if you actually need to be good at it.\nDon’t be tempted by Batman’s dangling carrots.\nUse your “ambidextrous” strengths.\nLeverage modern tooling.\nActively involve yourself in modern community.\n\nMost importantly:\nDo you really need to learn Rust? Can you settle for Go?\n","path":null},{"url":"https://calebtrevatt.com/blog/ai-for-the-shell/","title":"AI for the Shell","description":null,"body":"What is it?\nAI integration is becoming ubiquitous. Warp is pioneering “the terminal of the future” with AI capabilities built-in. VS Code supports extensions like Github Copilot and Cody, while Zed includes Zed AI. But what if you need a simple, versatile tool to bring AI into any conversation? Checkout Mods. Charm’s dev team and community are on a roll, producing some awesome new apps and libraries, and this is no exception. 👀\n\nMods takes the concept of prompting a GPT and brings it to the command line. It even supports piping stdin and stdout!\nAny output from any command on your terminal, think ls, cat, curl and the like, can become input for Mods. Prompt it with some instructions on how to handle that data and you can either get rich feedback in your terminal or pipe the output for further processing.\nCurious? Here are some examples!\n\nExamples\nRich Markdown Output\nMods supports rich colour and formatting out-of-the-box. Install Charm’s Glow, set the default output format to markdown and every response will be pretty. ✨\n\nEvaluate Script Security\nHow about those inherently-unsafe one-liner shell script installers? Now finally safe with Mods! Here’s an example in WSL Ubuntu:\n\nPiping GitHub API Data\nFeed it raw JSON data from an API. Here it is running in good old Powershell 5 on Windows 10:\n\nPiping to Text-to-Speech\nWhat about some text to speech? We can pipe stdout to a text to speech engine. Here’s a little example with Wsay, a Windows equivalent to “Say” on MacOS: https://github.com/p-groarke/wsay\n\n\n\t\n\t\tTip\n\tIt might be worth considering something a little more natural if you want it to read you bedtime stories. Google text-to-speech might be a better option.\n\n\n\n  \n  Your browser does not support the audio element.\n\nCalling in a Loop\nYou can even call it in a loop! This will ask for 10 fresh duck haikus. Each iteration is a new conversation. No conversational context; guaranteed freshness. 🍃\n\nAnd in Bash, like so:\n\nFor more examples check out the official ones from the Mods repo\nMulti LLM Support\nMods supports multiple Large Language Models (LLMs) through multiple providers. Providing an OpenAI API key gets you a pretty quick out-of-box experience. It’s already set up to use OpenAI’s GPT-4 by default.\nPop open the settings with:\nmods --settings\nNote, you’ll have to define a default $EDITOR in your environment variables.\nYou’ll be greeted with the mods.yml file. Check out the APIs section. Mods supports:\n\n\nOpenAI: GPT-4O, GPT-4, GPT-3.5-Turbo, etc.\n\n\nAzure: GPT-4O, GPT-4, GPT-3.5-Turbo, etc.\n\n\nPerplexity AI: CodeLlama, Mistral, Claude 3, Sonar, etc.\n\n\nGroq: Mixtral, Llama 2, Llama 3, etc.\n\n\nRunPod: OpenChat, Ollama, etc (IaaS/SaaS)\n\n\nLocal: Llama.cpp, GPT4ALL.cpp, etc. (local - GPU optional!)\n\n\n\n\t\n\t\tNote\n\tUntil today, I’d never tried Groq. Boy is it fast! Evidently, Groq provides significantly faster inference through next-gen hardware: Language Processing Units (LPUs).\nAPI access is free, at least for now. I couldn’t find any official pricing anywhere. My guess is they’re relying on the free access to spread the word so they sell their chips 🍟💲\nCheck it out: https://groq.com\n\n\n\nConfiguration is the same for all providers. Provide the base url, desired models, and specify aliases for those models. If you want to use a specific model, call it like this:\n\"What is gravity?\" | mods --model=\"Mixtral\"\nYou can also supply -M or --Ask-Model to interactively choose a model (though this seems to be ignored if you pass a prompt non-interactively).\nConversational Memory\nNice! Now when I was generating haikus I hard-sold amneisa as a feature for conversational freshness. What if we wanted to remember conversations across commands? Maybe with something more complicated… Something that can’t be done “zero-shot”?\nWell thankfully Mods has some handy parameters that allow resuming and managing conversations:\n\nA Really Heavy Example\nHere’s a PowerShell commandlet I made (along with 59 other functions necessary to make it work). I use it to provision temporary user accounts for student exams at my workplace.\nNew-Exam -D 10/03 -FT 8 -TT 11 -Alloc 105 -U 5 -CC \"10SCI\"\nMy bespoke exam provisioning commandlet\nFor the sake of your screen real-estate I’ve used the parameter aliases, but I will explain in a moment!\nEssentially this commandlet:\n\n\nSets Active Directory account logon hours\n\n\nSets account expiration time\n\n\nSets group membership (for exam conditions)\n\n\nValidates users by name or student ID and fetches AD attributes\n\n\nPopulates an HTML login sheet template with user data and exam details\n\n\nMerges the sheets into a PDF\n\n\nAnd it saves me HOURS.\nBut one thing remains that sucks like a parasite at my remaining time and brain power:\nThe exam login requests themselves.\nThe problem is that login reqeuests aren’t consistent. Requests come in all shapes and sizes. Some come with multiple updates across a chain of emails. Some come in concise bullet points. Some say “next Wednesday”. Others say “19/05/2024”.\nWhat an excellent opportunity for AI – and for Mods!\nInterfacing with the Commandlet\nSo first I told Mods how to commandlet. works and the inputs and outputs I expect:\n\n\n\t\n\t\tNote\n\t“Conditions” above I asked it not to include. The conditions aren’t difficult to pass, but for the sake of experimentation I left them out. Fortunately, if a mandatory parameter is left out of a PowerShell commandlet it will be prompted at runtime. Good to know!\n\n\nPushing Jobs\nThen I gave it an exam login request email.\n\nRetrospect\nRunning the commandlet is now as easy as “continuing” the conversation with the previous context (the instructions) and piping it to PowerShell’s Invoke-Expression. Super easy!\nI actually have a lot of validation built into the commandlet. Like what if the exam is on a Saturday? Shouldn’t happen. What if the subject is only offered in grade 12 and a grade 10 student is taking it? Shouldn’t happen.\nI’m a little wonky about trusting validation to the mysterious Latent Space. Getting different answers to the same question asked twice makes me a little twitchy… But technically all of those validation rules could be applied at the prompt context level instead.\nCould this all be solved with a simple HTML form? Definitely! Yes.\nShould it? Mmhmm. Probably!\nAs a general rule, if you want automation to produce consistently reliable outputs, you need consistently reliable inputs. AI “magics” away some of this, but it still requires some massaging and testing.\nIn a situation like this, if a user form was not an option, it would be a great candidate for an AI flow in LangChain or Flowise. I’m hoping to take a look at these soon!\nWrapping Up\nMods is a great bridge between AI LLMs great demo of some cheap ad-hoc glue to try things out. Great for protyping, proof-of-concept, or ad-hoc formatting/parsing/sorting and the like. Perfect for someone like me who frequently gets caught up on the implementation details. With mods I can rapidly prototype in English, adjusting for desired behaviour with additional prompts. Once I’ve got a proof of concept, I can lay down something more solid.\nIf an HTTP form This is actually a great use case for LangChain or Flowise. Hoping to take a look at these soon!\n","path":null}]